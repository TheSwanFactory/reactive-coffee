{"name":"reactive.coffee","tagline":"A lightweight CoffeeScript library for reactive programming and for declaratively specifying reactive DOM templates in a simple embedded DSL.","body":"A lightweight CoffeeScript library for reactive programming and for\r\ndeclaratively specifying reactive DOM templates in a simple embedded DSL.\r\n\r\nThis library has been tested and used on Chrome, Firefox, Safari, and IE10.\r\n\r\nQuickstart Examples\r\n-------------------\r\n\r\n[Play with the TodoMVC example on jsFiddle][fiddle]\r\n\r\n[fiddle]: http://jsfiddle.net/yang/SGvuy/\r\n\r\nHere's a quick taste of what using Reactive is like.\r\n\r\nA regular static DOM:\r\n\r\n```coffeescript\r\n$('body').append(\r\n  div { class: 'main-content' }, [\r\n    h1 {}, [ 'Hello world!' ]\r\n    ul { class: 'nav' }, [\r\n      li {}, [ 'Home' ]\r\n      li {}, [ 'About' ]\r\n      li {}, [ 'Contact' ]\r\n    ]\r\n    input { type: 'text', placeholder: 'Your name here' }\r\n  ]\r\n)\r\n```\r\n\r\nA simple reactive example implementing a simple todo list (you can also find a\r\nmore complete TodoMVC example in `examples/`):\r\n\r\n```coffeescript\r\nclass Task\r\n  constructor: (description, isDone) ->\r\n    @description = rx.cell(description)\r\n    @isDone = rx.cell(isDone)\r\n\r\ntasks = rx.array([\r\n  new Task('Get milk', false)\r\n  new Task('Play with Reactive Coffee', false)\r\n  new Task('Walk the dog', false)\r\n])\r\n\r\n$('body').append(\r\n  div {class: 'task-manager'}, [\r\n    h1 {}, [\"Tasks for today\"]\r\n    ul {class: 'tasks'}, tasks.map (task) ->\r\n      li {class: 'task'}, [\r\n        input {\r\n          type: 'checkbox'\r\n          checked: bind -> task.isDone.get()\r\n          init: -> @change => task.isDone.set(@val())\r\n        }\r\n        task.description.get()\r\n      ]\r\n    $newTask = input {type: 'text', placeholder: 'Enter new task'}\r\n  ]\r\n)\r\n\r\n$newTask.keydown (e) ->\r\n  if e.key == 13\r\n    tasks.push(new Task($(this).val(), false))\r\n    $(this).val('')\r\n```\r\n\r\nRecursively render a tree structure, something that's a bit more complex to\r\nincrementally maintain otherwise:\r\n\r\n```coffeescript\r\nclass TreeNode\r\n  constructor: (value, children) ->\r\n    @value = rx.cell(value)\r\n    # Arrays only insert/remove the minimum set into/from the DOM (via the `map` method)\r\n    @children = rx.array(children)\r\n\r\nroot = new TreeNode('root', [\r\n  new TreeNode('alpha', [])\r\n  new TreeNode('beta', [\r\n    new TreeNode('gamma', [])\r\n    new TreeNode('delta', [])\r\n  ])\r\n])\r\n\r\n# Nested `bind`/`map` calls are insulated from parents, re-rendering only\r\n# what's necessary.\r\nrecurse = (node) ->\r\n  li {}, [\r\n    span {}, bind -> [ node.value.get() ]\r\n    ul {}, node.children.map -> recurse\r\n  ]\r\n\r\n$('body').append( ul {}, [ recurse(root) ] )\r\n```\r\n\r\nYou can also have things elements depend certain attributes of each other.\r\nHere is a text box that searches/filters the given list.\r\n\r\n```coffeescript\r\ncountries = [...]\r\n$searchBox = input {\r\n  type: 'text'\r\n  placeholder: 'Type a country name'\r\n}\r\nul {}, bind ->\r\n  for country in countries\r\n    if _(country).startsWith($searchBox.rx('text'))\r\n      li {}, [country]\r\n```\r\n\r\nCurrently there is a complete [TodoMVC] example in the `examples/` directory\r\n(see the [source]) and on [jsFiddle][fiddle].  More examples will be added!\r\n\r\n[TodoMVC]: http://todomvc.com/\r\n[source]: https://github.com/yang/reactive-coffee/blob/master/examples/todomvc/index.jade\r\n","google":"UA-41900480-1","note":"Don't delete this file! It's used internally to help with page regeneration."}